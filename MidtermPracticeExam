SELECT 
    p.ProductName, 
    c.CategoryName, 
    s.CompanyName AS SupplierName
FROM 
    Products p
JOIN 
    Categories c ON p.CategoryID = c.CategoryID
JOIN 
    Suppliers s ON p.SupplierID = s.SupplierID;

 SELECT 
    c.CustomerID, 
    c.CompanyName
FROM 
    Customers c
LEFT JOIN 
    Orders o ON c.CustomerID = o.CustomerID
WHERE 
    o.OrderID IS NULL;

 SELECT 
    e.EmployeeID, 
    e.FirstName, 
    e.LastName, 
    SUM(od.UnitPrice * od.Quantity) AS TotalSales
FROM 
    Employees e
JOIN 
    Orders o ON e.EmployeeID = o.EmployeeID
JOIN 
    [Order Details] od ON o.OrderID = od.OrderID
GROUP BY 
    e.EmployeeID, e.FirstName, e.LastName
ORDER BY 
    TotalSales DESC
LIMIT 5;  -- Use TOP 5 for SQL Server

INSERT INTO Products 
    (ProductName, SupplierID, CategoryID, QuantityPerUnit, UnitPrice, UnitsInStock, UnitsOnOrder, ReorderLevel, Discontinued)
VALUES 
    ('Northwind Coffee', 1, 1, '10 boxes x 20 bags', 18.00, 39, 0, 10, 0);

 UPDATE Products
SET UnitPrice = UnitPrice * 1.10
WHERE CategoryID = (SELECT CategoryID FROM Categories WHERE CategoryName = 'Beverages');

INSERT INTO Orders (CustomerID, OrderDate)
VALUES ('VINET', GETDATE());  -- Use CURRENT_TIMESTAMP for SQL Server

DELETE FROM Orders
WHERE CustomerID = 'VINET' AND OrderDate = CAST(GETDATE() AS DATE)  -- Ensure to specify the correct order if there are multiple

CREATE TABLE ProductReviews (
    ReviewID INT PRIMARY KEY,
    ProductID INT,
    CustomerID NCHAR(5),
    Rating INT,
    ReviewText NVARCHAR(MAX),
    ReviewDate DATETIME,
    FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
);

CREATE VIEW vw_ProductSales AS
SELECT 
    p.ProductName, 
    c.CategoryName, 
    SUM(od.UnitPrice * od.Quantity) AS TotalSales
FROM 
    Products p
JOIN 
    [Order Details] od ON p.ProductID = od.ProductID
JOIN 
    Categories c ON p.CategoryID = c.CategoryID
GROUP BY 
    p.ProductName, c.CategoryName;

CREATE PROCEDURE sp_TopCustomersByCountry
    @CountryName NVARCHAR(100)
AS
BEGIN
    SELECT TOP 3 
        c.CustomerID, 
        c.CompanyName, 
        SUM(od.UnitPrice * od.Quantity) AS TotalOrderAmount
    FROM 
        Customers c
    JOIN 
        Orders o ON c.CustomerID = o.CustomerID
    JOIN 
        [Order Details] od ON o.OrderID = od.OrderID
    WHERE 
        c.Country = @CountryName
    GROUP BY 
        c.CustomerID, c.CompanyName
    ORDER BY 
        TotalOrderAmount DESC;
END;

SELECT 
    e.EmployeeID, 
    e.FirstName, 
    e.LastName, 
    COUNT(DISTINCT od.ProductID) AS UniqueProductsCount
FROM 
    Employees e
JOIN 
    Orders o ON e.EmployeeID = o.EmployeeID
JOIN 
    [Order Details] od ON o.OrderID = od.OrderID
GROUP BY 
    e.EmployeeID, e.FirstName, e.LastName
ORDER BY 
    UniqueProductsCount DESC
LIMIT 1;