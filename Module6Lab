-- Create an authors table
CREATE TABLE Authors (
    AuthorID INT PRIMARY KEY,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    Birthdate DATE
);
-- Create a books table
CREATE TABLE Books (
    BookID INT PRIMARY KEY,
    Title VARCHAR(100),
    AuthorID INT,
    PublicationYear INT,
    Price DECIMAL(10,2),
    FOREIGN KEY (AuthorID) REFERENCES Authors(AuthorID)
);
--Insert data into Authors table
INSERT INTO Authors (AuthorID, FirstName, LastName, BirthDate) 
VALUES
(1, 'Jane', 'Austen', '1775-12-16'),
(2, 'George', 'Orwell', '1903-06-25'),
(3, 'J.K.', 'Rowling', '1965-07-31'),
(4, 'Ernest', 'Hemingway', '1899-07-21'),
(5, 'Virginia', 'Woolf', '1882-01-25')

INSERT INTO Books (BookID, Title, AuthorID, PublicationYear, Price)
VALUES
(1, 'Pride and Prejudice', 1, 1813, 12.99),
(2, '1984', 2, 1949, 10.99),
(3, 'Harry potter and the Philosopher''s Stone', 3, 1997, 15.99),
(4, 'The old man and the sea' , 4, 1952, 11.99),
(5, 'To The Lighthouse', 5,1927, 13.99)

--Create a view that pulls data from the Authors and the Books tables
CREATE VIEW RecentBooks AS
SELECT
    BookID,
    Title,
    PublicationYear,
    Price
FROM
    Books
WHERE
    PublicationYear > 1990;   

 -- Create a view that combines information from two tables
 CREATE VIEW BookDetails AS
 SELECT b.BookID, b.Title, a.FirstName + ' ' + a.LastName AS AuthorName, b.PublicationYear, 
b.Price  
FROM Books b  
JOIN Authors a ON b.AuthorID = a.AuthorID;

-- Create a view that shows the number of books and the average price of books
CREATE View AuthorStats AS
SELECT a.AuthorID, a.FirstName + ' ' + a.LastName AS AuthorName,
COUNT(b.BookID) AS BookCount,
AVG(b.Price) AS AverageBookPrice
FROM Authors a LEFT JOIN Books b ON a.AuthorID = b.AuthorID
GROUP BY a.AuthorID, a.Firstname, a.Lastname;

-- a) Retrieve all the recounds from the Bookdetails view
SELECT Title, Price FROM BooDetails;

--b) List all the books from the RecentBooks view
SELECT * FROM RecentBooks;

--c) Show statistics for authors
SELECT * FROM AuthorStats;

-- Create an updateable view for author's firstname and lastname
CREATE VIEW AuthorContactInfo AS
SELECT AuthorID, FirstName, LastName
FROM Authors;

-- Update the author's name through the view
UPDATE AuthorContactInfo
SET FirstName = 'Joanne'
WHERE AuthorID = 3;

-- Query the view:
SELECT * FROM AuthorCantactInfo;

-- Create the audit table
CREATE TABLE BookPriceAudit(
    AuditId INT IDENTITY(1,1) PRIMARY KEY,
    BookID INT,
    OldPrice DECIMAL(10,2),
    NewPrice DECIMAL(10,2),
    ChangeDate DATETIME DEFAULT GETDATE()
);

-- Create the trigger
CREATE TRIGGER trg_BookPriceChange
ON Books
AFTER UPDATE
AS
BEGIN
    IF UPDATE(Price)
    BEGIN
        INSERT INTO BookPriceAudit (BookID, Oldprice, NewPrice)
        SELECT i.BookID, d.Price, i.Price
        FROM inserted i 
        Join deleted d ON i.BookID = d.BookID
    END
END;    

-- Update a book's price to test the trigger
UPDATE Books SET Price = 14.99 WHERE BookID = 1;

-- Select the data from the audit tableto see if it got updated by the trigger
SELECT * FROM BookPriceAudit;


-- Create table
CREATE TABLE BookReviews (
    ReviewID INT PRIMARY KEY,
    BookID INT,
    CustomerID NCHAR(5),
    Rating INT CHECK (Rating BETWEEN 1 AND 5),
    ReviewText NVARCHAR(MAX),
    ReviewDate DATE,
    FOREIGN KEY (BookID) REFERENCES Books(BookID),
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
);

-- Query view
CREATE VIEW vw_BookReviewStats AS
SELECT 
    b.Title AS BookTitle,
    COUNT(br.ReviewID) AS TotalReviews,
    AVG(br.Rating) AS AverageRating,
    MAX(br.ReviewDate) AS MostRecentReviewDate
FROM 
    Books b
LEFT JOIN 
    BookReviews br ON b.BookID = br.BookID
GROUP BY 
    b.Title;

-- create trigger
CREATE TRIGGER tr_ValidateReviewDate
ON BookReviews
INSTEAD OF INSERT
AS
BEGIN
    IF EXISTS (SELECT * FROM inserted WHERE ReviewDate > GETDATE())
    BEGIN
        RAISERROR('Review date cannot be in the future.', 16, 1);
        ROLLBACK TRANSACTION;
    END
    ELSE
    BEGIN
        INSERT INTO BookReviews (ReviewID, BookID, CustomerID, Rating, ReviewText, ReviewDate)
        SELECT ReviewID, BookID, CustomerID, Rating, ReviewText, ReviewDate FROM inserted;
    END
END;

ALTER TABLE Books
ADD AverageRating DECIMAL(3,2);

-- create trigger
CREATE TRIGGER tr_UpdateBookRating
ON BookReviews
AFTER INSERT, UPDATE, DELETE
AS
BEGIN
    DECLARE @BookID INT;

    -- Handle INSERT and UPDATE
    IF EXISTS (SELECT * FROM inserted)
    BEGIN
        SELECT @BookID = BookID FROM inserted;
    END
    -- Handle DELETE
    ELSE IF EXISTS (SELECT * FROM deleted)
    BEGIN
        SELECT @BookID = BookID FROM deleted;
    END

    -- Update the AverageRating
    UPDATE Books
    SEt AverageRating = (SELECT AVG(Rating) FROM BookReviews WHERE BookID = @BookID)
    WHERE BookID = @BookID;
END;

-- Query the view to see the statistics
SELECT * FROM vw_BookReviewStats;

-- Update a review's rating
UPDATE BookReviews
SET Rating = 4, ReviewText = 'Updated review text.'
WHERE ReviewID = 1;  -- Update the first review

-- Check the updated average rating
SELECT * FROM Books WHERE BookID = 101;